name: CI

on:
  push:
    branches: [main]
    paths:
      - "apps/**"
      - "docker/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main]
    paths:
      - "apps/**"
      - "docker/**"
      - ".github/workflows/**"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      plots_py: ${{ steps.filter.outputs.plots_py }}
      stats_rs: ${{ steps.filter.outputs.stats_rs }}
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'apps/backend/**'
            frontend:
              - 'apps/frontend/**'
            plots_py:
              - 'apps/plots_py/**'
            stats_rs:
              - 'apps/stats_rs/**'
            docker:
              - 'docker/**'

  node:
    name: Node (backend & frontend)
    needs: changes
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ["backend", "frontend"]
    defaults:
      run:
        working-directory: apps/${{ matrix.app }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"
          cache-dependency-path: apps/${{ matrix.app }}/package-lock.json
      - run: npm ci --no-audit --no-fund
      - run: npm run lint || echo "(lint not configured)"
      - run: npm run typecheck || echo "(typecheck not configured)"
      - run: npm test || echo "(no tests)"
      - if: matrix.app == 'frontend'
        run: npm run build

  python:
    name: Python (plots_py)
    needs: changes
    if: needs.changes.outputs.plots_py == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/plots_py
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            apps/plots_py/requirements.txt
            apps/plots_py/requirements-dev.txt
      - run: pip install -r requirements-dev.txt
      - run: ruff check . || echo "(lint not configured)"
      - run: pytest -q || echo "(no tests)"

  rust:
    name: Rust (stats_rs)
    needs: changes
    if: needs.changes.outputs.stats_rs == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/stats_rs
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - run: cargo check --locked
      - run: cargo test --locked || echo "(no tests)"

  docker:
    name: Docker Build
    needs: [changes, node, python, rust]
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.plots_py == 'true' || needs.changes.outputs.stats_rs == 'true' || needs.changes.outputs.docker == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      # ðŸ‘‡ Add this step right after checkout
      - name: Create CI .env
        working-directory: docker
        run: |
          cat > .env <<'EOF'
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST=db
          POSTGRES_PORT=5432

          PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}

          MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_HOST=mongo
          MONGO_PORT=27017

          MONGO_EXPRESS_USER=${{ secrets.MONGO_EXPRESS_USER }}
          MONGO_EXPRESS_PASSWORD=${{ secrets.MONGO_EXPRESS_PASSWORD }}

          RUST_SVC_URL=http://stats_rs:9000
          PLOT_SVC_URL=http://plots_py:7000
          VITE_API_URL=http://backend:8080
          EOF

      - name: Validate compose
        working-directory: docker
        run: docker compose config

      - name: Build with cache
        working-directory: docker
        run: |
          docker buildx bake \
          --allow=fs.read=../apps/backend \
          --allow=fs.read=../apps/frontend \
          --allow=fs.read=../apps/plots_py \
          --allow=fs.read=../apps/stats_rs \
          --set *.cache-from=type=gha,scope=statsapp \
          --set *.cache-to=type=gha,scope=statsapp,mode=max \
          --set plots_py.no-cache=true

  smoke:
    name: Smoke Test
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create CI .env
        working-directory: docker
        run: |
          cat > .env <<EOF
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST=db
          POSTGRES_PORT=5432
          PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
          MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_HOST=mongo
          MONGO_PORT=27017
          MONGO_EXPRESS_USER=${{ secrets.MONGO_EXPRESS_USER }}
          MONGO_EXPRESS_PASSWORD=${{ secrets.MONGO_EXPRESS_PASSWORD }}
          RUST_SVC_URL=http://stats_rs:9000
          PLOT_SVC_URL=http://plots_py:7000
          EOF

      - name: Start stack
        working-directory: docker
        run: |

      - name: Start stack
        working-directory: docker
        shell: bash
        run: |
          docker compose up -d db mongo
          # wait for dbs
          timeout 60 bash -c 'until docker compose ps | grep -E "db.*healthy" && docker compose ps | grep -E "mongo.*healthy"; do sleep 2; done'
          docker compose up -d backend plots_py stats_rs frontend
          # wait for app services
          timeout 90 bash -c 'until docker compose ps | grep -E "backend.*healthy" && docker compose ps | grep -E "plots_py.*healthy" && docker compose ps | grep -E "stats_rs.*healthy"; do sleep 2; done'

      - name: Stop stack
        if: always()
        working-directory: docker
        run: docker compose down -v
