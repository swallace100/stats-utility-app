name: CI

on:
  push:
    branches: [main]
    paths:
      - "apps/**"
      - "docker/**"
      - ".github/workflows/**"
  pull_request:
    branches: [main]
    paths:
      - "apps/**"
      - "docker/**"
      - ".github/workflows/**"

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      frontend: ${{ steps.filter.outputs.frontend }}
      plots_py: ${{ steps.filter.outputs.plots_py }}
      stats_rs: ${{ steps.filter.outputs.stats_rs }}
      docker: ${{ steps.filter.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'apps/backend/**'
            frontend:
              - 'apps/frontend/**'
            plots_py:
              - 'apps/plots_py/**'
            stats_rs:
              - 'apps/stats_rs/**'
            docker:
              - 'docker/**'

  node:
    # Name each matrix check distinctly so branch protection matches them
    name: Node (backend & frontend) (${{ matrix.app }})
    needs: changes
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        app: [backend, frontend]
    defaults:
      run:
        working-directory: apps/${{ matrix.app }}
    steps:
      - uses: actions/checkout@v4

      # No-op (but pass) when this app didn't change
      - name: No changes for ${{ matrix.app }} — skipping
        if: >
          (matrix.app == 'backend'  && needs.changes.outputs.backend  != 'true') ||
          (matrix.app == 'frontend' && needs.changes.outputs.frontend != 'true')
        run: echo "No relevant changes for ${{ matrix.app }}; passing."

      # Real work only when the matching app DID change
      - uses: actions/setup-node@v4
        if: >
          (matrix.app == 'backend'  && needs.changes.outputs.backend  == 'true') ||
          (matrix.app == 'frontend' && needs.changes.outputs.frontend == 'true')
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: apps/${{ matrix.app }}/package-lock.json

      - run: npm ci --no-audit --no-fund
        if: >
          (matrix.app == 'backend'  && needs.changes.outputs.backend  == 'true') ||
          (matrix.app == 'frontend' && needs.changes.outputs.frontend == 'true')

      - run: npm run lint || echo "(lint not configured)"
        if: >
          (matrix.app == 'backend'  && needs.changes.outputs.backend  == 'true') ||
          (matrix.app == 'frontend' && needs.changes.outputs.frontend == 'true')

      - run: npm run typecheck || echo "(typecheck not configured)"
        if: >
          (matrix.app == 'backend'  && needs.changes.outputs.backend  == 'true') ||
          (matrix.app == 'frontend' && needs.changes.outputs.frontend == 'true')

      - run: npm test || echo "(no tests)"
        if: >
          (matrix.app == 'backend'  && needs.changes.outputs.backend  == 'true') ||
          (matrix.app == 'frontend' && needs.changes.outputs.frontend == 'true')

      - if: matrix.app == 'frontend' && needs.changes.outputs.frontend == 'true'
        run: npm run build

  python:
    name: Python (plots_py)
    needs: changes
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/plots_py
    steps:
      - uses: actions/checkout@v4

      # Fast no-op when plots_py didn't change (still reports success)
      - name:
          No plots_py changes — skipping
          # if NOT changed
        if: needs.changes.outputs.plots_py != 'true'
        run: echo "No changes in apps/plots_py; passing."

      # Real steps only when plots_py changed
      - uses: actions/setup-python@v5
        if: needs.changes.outputs.plots_py == 'true'
        with:
          python-version: "3.12"
          cache: "pip"
          cache-dependency-path: |
            apps/plots_py/requirements.txt
            apps/plots_py/requirements-dev.txt

      - run: pip install -r requirements-dev.txt
        if: needs.changes.outputs.plots_py == 'true'

      - run: ruff check . || echo "(lint not configured)"
        if: needs.changes.outputs.plots_py == 'true'

      - run: pytest -q || echo "(no tests)"
        if: needs.changes.outputs.plots_py == 'true'

  rust:
    name: Rust (stats_rs)
    needs: changes
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apps/stats_rs
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly

      # Fast no-op when stats_rs didn't change (still reports success)
      - name: No stats_rs changes — skipping
        if: needs.changes.outputs.stats_rs != 'true'
        run: echo "No changes in apps/stats_rs; passing."

      # Real steps only when stats_rs changed
      - uses: dtolnay/rust-toolchain@stable
        if: needs.changes.outputs.stats_rs == 'true'

      - uses: Swatinem/rust-cache@v2
        if: needs.changes.outputs.stats_rs == 'true'

      - run: cargo check --locked
        if: needs.changes.outputs.stats_rs == 'true'

      - run: cargo test --locked || echo "(no tests)"
        if: needs.changes.outputs.stats_rs == 'true'

  docker:
    name: Docker Build
    needs: [changes, node, python, rust]
    if: needs.changes.outputs.backend == 'true' || needs.changes.outputs.frontend == 'true' || needs.changes.outputs.plots_py == 'true' || needs.changes.outputs.stats_rs == 'true' || needs.changes.outputs.docker == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Write docker/.env
        run: |
          mkdir -p docker
          cat > docker/.env <<'EOF'
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST=db
          POSTGRES_PORT=5432

          MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_HOST=mongo
          MONGO_PORT=27017

          MONGO_EXPRESS_USER=${{ secrets.MONGO_EXPRESS_USER }}
          MONGO_EXPRESS_PASSWORD=${{ secrets.MONGO_EXPRESS_PASSWORD }}

          PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}

          RUST_SVC_URL=http://stats_rs:9000
          PLOT_SVC_URL=http://plots_py:7000
          EOF

      - name: Validate compose
        working-directory: docker
        run: docker compose config

      - name: Build with bake
        uses: docker/bake-action@v5
        with:
          workdir: docker
          files: docker-compose.yml
          set: |
            *.cache-from=type=gha,scope=statsapp
            *.cache-to=type=gha,scope=statsapp,mode=max
            plots_py.no-cache=true
          allow: |
            fs.read=..
            fs.read=../apps/backend
            fs.read=../apps/frontend
            fs.read=../apps/plots_py
            fs.read=../apps/stats_rs

  smoke:
    name: Smoke Test
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Create CI .env
        working-directory: docker
        run: |
          cat > .env <<EOF
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}
          POSTGRES_HOST=db
          POSTGRES_PORT=5432
          PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }}
          PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }}
          MONGO_INITDB_ROOT_USERNAME=${{ secrets.MONGO_INITDB_ROOT_USERNAME }}
          MONGO_INITDB_ROOT_PASSWORD=${{ secrets.MONGO_INITDB_ROOT_PASSWORD }}
          MONGO_HOST=mongo
          MONGO_PORT=27017
          MONGO_EXPRESS_USER=${{ secrets.MONGO_EXPRESS_USER }}
          MONGO_EXPRESS_PASSWORD=${{ secrets.MONGO_EXPRESS_PASSWORD }}
          RUST_SVC_URL=http://stats_rs:9000
          PLOT_SVC_URL=http://plots_py:7000
          EOF

      - name: Debug services
        working-directory: docker
        shell: bash
        run: |
          echo "Config services:"; docker compose -f docker-compose.yml config --services
          echo "Runtime services:"; docker compose -f docker-compose.yml ps --services || true
          echo "PS full:"; docker compose -f docker-compose.yml ps || true

      - name: Start stack
        working-directory: docker
        shell: bash
        run: |
          set -euo pipefail
          COMPOSE_FILE="-f docker-compose.yml"
          echo "== Compose services (from config) =="
          docker compose $COMPOSE_FILE config --services
          # helper: wait until a service is healthy (or has no healthcheck -> 'none')
          wait_healthy () {
            local svc_raw="$1"
            # trim potential CRLF from YAML line endings
            local svc="$(echo "$svc_raw" | tr -d '\r')"
            # validate service exists in config
            if ! docker compose $COMPOSE_FILE config --services | tr -d '\r' | grep -qx "$svc"; then
              echo "Service '$svc' not found in compose config. Available:"
              docker compose $COMPOSE_FILE config --services
              exit 1
            fi
            # ensure it's up
            docker compose $COMPOSE_FILE up -d "$svc"
            # get container id
            local id
            id="$(docker compose $COMPOSE_FILE ps -q "$svc" | tr -d '\r')"
            if [ -z "$id" ]; then
              echo "No container id yet for '$svc'; bringing up again..."
              docker compose $COMPOSE_FILE up -d "$svc"
              id="$(docker compose $COMPOSE_FILE ps -q "$svc" | tr -d '\r')"
            fi
            if [ -z "$id" ]; then
              echo "Still no container id for '$svc'. Dumping ps:"
              docker compose $COMPOSE_FILE ps
              exit 1
            fi
            echo "Waiting for $svc ($id) to be healthy..."
            for i in {1..60}; do
              status="$(docker inspect -f '{{if .State.Health}}{{.State.Health.Status}}{{else}}none{{end}}' "$id")"
              echo "  $svc health: $status"
              if [ "$status" = "healthy" ] || [ "$status" = "none" ]; then
                return 0
              fi
              sleep 2
            done
            echo "Timed out waiting for $svc"
            return 1
          }
          # bring up DBs first and wait
          docker compose $COMPOSE_FILE up -d db mongo
          wait_healthy db
          wait_healthy mongo
          # bring up app services
          docker compose $COMPOSE_FILE up -d backend plots_py stats_rs frontend
          # wait for each
          wait_healthy backend
          wait_healthy plots_py
          wait_healthy stats_rs

      - name: Curl health endpoints (resilient wget)
        working-directory: docker
        run: |
          set -e
          docker compose exec -T backend  sh -lc 'for i in $(seq 1 40); do wget -qO- http://127.0.0.1:8080/health && exit 0 || sleep 2; done; exit 1'
          docker compose exec -T plots_py sh -lc 'for i in $(seq 1 40); do wget -qO- http://127.0.0.1:7000/health && exit 0 || sleep 2; done; exit 1'
          docker compose exec -T stats_rs sh -lc 'for i in $(seq 1 20); do wget -qO- http://127.0.0.1:9000/health && exit 0 || sleep 2; done; exit 0'

      - name: Stop stack
        if: always()
        working-directory: docker
        run: docker compose down -v
