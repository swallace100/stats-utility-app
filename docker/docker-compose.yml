services:
  frontend:
    build:
      context: ../apps/frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: http://backend:8080
    ports:
      - "8085:80"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1/ > /dev/null || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      backend:
        condition: service_started
    networks: [appnet]

  backend:
    build:
      context: ..
      dockerfile: apps/backend/Dockerfile
    ports: ["8080:8080"]
    env_file: [.env]
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - MONGO_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/?authSource=admin
      - RUST_SVC_URL=${RUST_SVC_URL}
      - PLOT_SVC_URL=${PLOT_SVC_URL}
      - NO_DB=1
      - FAKE_SERVICES=1
      - PORT=8080
      - UPLOAD_DIR=/app/data/uploads
      - PLOTS_DIR=/app/data/plots
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS http://127.0.0.1:8080/health >/dev/null || exit 1",
        ]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - data:/app/data
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
      stats_rs:
        condition: service_started
      plots_py:
        condition: service_started
    networks: [appnet]

  stats_rs:
    build:
      context: ../apps/stats_rs
      dockerfile: Dockerfile
    ports: ["9000:9000"]
    environment:
      - DATA_DIR=/data
    volumes:
      - data:/data
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:9000/api/v1/health"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 30s
    networks: [appnet]

  plots_py:
    build:
      context: ../apps/plots_py
      dockerfile: Dockerfile
      target: runtime
    ports: ["7000:7000"]
    environment:
      - DATA_DIR=/data
      - PLOTS_DIR=/data/plots
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:7000/health || exit 1"]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - data:/data
      - plot_cache:/app/out
    networks: [appnet]

  db:
    image: postgres:16
    env_file: [.env]
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1 -p ${POSTGRES_PORT}",
        ]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - db_data:/var/lib/postgresql/data
    networks: [appnet]

  pgadmin:
    image: dpage/pgadmin4:9.8
    depends_on:
      db:
        condition: service_healthy
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: "False"
    ports: ["5050:80"]
    volumes:
      - pgadmin_data:/var/lib/pgadmin
      - ./pgadmin/servers.json:/pgadmin4/servers.json:ro
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://127.0.0.1/ >/dev/null || exit 1"]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks: [appnet]

  mongo:
    image: mongo:7
    env_file: [.env]
    command: ["--auth"]
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
    ports: ["27017:27017"]
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mongosh --quiet -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 }).ok' || exit 1",
        ]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - mongo_data:/data/db
    networks: [appnet]

  mongo_express:
    image: mongo-express:1
    depends_on:
      mongo:
        condition: service_healthy
    environment:
      ME_CONFIG_MONGODB_SERVER: mongo
      ME_CONFIG_MONGODB_ENABLE_ADMIN: "true"
      ME_CONFIG_MONGODB_AUTH_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      ME_CONFIG_MONGODB_AUTH_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_USER}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_PASSWORD}
    ports: ["127.0.0.1:8081:8081"]
    healthcheck:
      test:
        ["CMD-SHELL", "wget -qO- http://127.0.0.1:8081/ >/dev/null || exit 1"]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 10s
    networks: [appnet]

volumes:
  db_data:
  mongo_data:
  plot_cache:
  pgadmin_data:
  data:

networks:
  appnet:
    driver: bridge
