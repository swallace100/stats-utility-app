services:
  frontend:
    build:
      context: ../apps/frontend
      dockerfile: Dockerfile
      args:
        VITE_API_URL: ${VITE_API_URL}
    ports:
      - "8085:80"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1/ > /dev/null || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 10s
    depends_on:
      backend:
        condition: service_started
    networks: [appnet]

  backend:
    build:
      context: ..
      dockerfile: apps/backend/Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - RUST_SVC_URL=${RUST_SVC_URL}
      - PLOT_SVC_URL=${PLOT_SVC_URL}
      - FAKE_SERVICES=0
      - PORT=8080
      - UPLOAD_DIR=${UPLOAD_DIR}
      - PLOTS_DIR=${PLOTS_DIR}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -fsS http://127.0.0.1:8080/health >/dev/null || exit 1",
        ]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - data:/app/data
    depends_on:
      stats_rs:
        condition: service_started
      plots_py:
        condition: service_started
    networks: [appnet]

  stats_rs:
    build:
      context: ../apps/stats_rs
      dockerfile: Dockerfile
    ports:
      - "9000:9000"
    environment:
      - DATA_DIR=/data
    volumes:
      - data:/data
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://127.0.0.1:9000/api/v1/health"]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 30s
    networks: [appnet]

  plots_py:
    build:
      context: ../apps/plots_py
      dockerfile: Dockerfile
      target: runtime
    ports:
      - "7000:7000"
    environment:
      - DATA_DIR=/data
      - PLOTS_DIR=/data/plots
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://127.0.0.1:7000/health || exit 1"]
      interval: 20s
      timeout: 3s
      retries: 5
      start_period: 10s
    volumes:
      - data:/data
      - plot_cache:/app/out
    networks: [appnet]

volumes:
  plot_cache:
  data:

networks:
  appnet:
    driver: bridge
