services:
  frontend:
    build:
      context: ../apps/frontend
      dockerfile: frontend.Dockerfile
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:8080
    depends_on:
      backend:
        condition: service_started

  backend:
    build:
      context: ../apps/backend
      dockerfile: backend.Dockerfile
    ports:
      - "8080:8080"
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
      - MONGO_URL=mongodb://${MONGO_INITDB_ROOT_USERNAME}:${MONGO_INITDB_ROOT_PASSWORD}@${MONGO_HOST}:${MONGO_PORT}/?authSource=admin
      - RUST_SVC_URL=${RUST_SVC_URL}
      - PLOT_SVC_URL=${PLOT_SVC_URL}
    depends_on:
      db:
        condition: service_healthy
      mongo:
        condition: service_healthy
      stats_rs:
        condition: service_started
      plots_py:
        condition: service_started

  stats_rs:
    build:
      context: ../apps/stats_rs
      dockerfile: stats_rs.Dockerfile
    ports:
      - "9000:9000"

  plots_py:
    build:
      context: ../apps/plots_py
      dockerfile: plots_py.Dockerfile
    ports:
      - "7000:7000"
    volumes:
      - plot_cache:/app/out

  db:
    image: postgres:16
    env_file:
      - .env
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1 -p ${POSTGRES_PORT}"
        ]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d:ro  # optional init scripts inside docker/

  mongo:
    image: mongo:7
    env_file:
      - .env
    ports:
      - "27017:27017" # optional for local dev
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "mongosh --quiet -u ${MONGO_INITDB_ROOT_USERNAME} -p ${MONGO_INITDB_ROOT_PASSWORD} --authenticationDatabase admin --eval 'db.runCommand({ ping: 1 }).ok' || exit 1"
        ]
      interval: 5s
      timeout: 3s
      retries: 10
    volumes:
      - mongo_data:/data/db

volumes:
  db_data:
  mongo_data:
  plot_cache:
